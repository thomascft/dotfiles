;
; Variables
;

(defpoll volume 
	:interval "50ms"
	`pamixer --get-volume-human | sed s/\%//`)
(defpoll brightness
	:interval "250ms"
	`brightnessctl i | grep -i Current | awk '{print $NF}' | sed 's/[^0-9]*//g'`)

;
; Windows
;}

(defwindow dashboard
	:monitor 0 
	:geometry (geometry
		:x "10px"
		:y "10px"
		:width "500px"
		:height "1060"
		:anchor "top left")
	:stacking "fg"
	(dashboard))

(defwindow sliders
  :monitor 0
  :geometry (geometry 
    :x "10px"
    :y "50px"
    :width "200px"
    :height "135px"
    :anchor "bottom left")
  :stacking "fg"
    (sliders)
  )
;
; Widgets
;

(defwidget sliders []
  (eventbox
    :onhoverlost "eww close sliders"
    (box
      :orientation "vertical"
      (slider_widget_sm :value volume :class "volume" :cmd "pamixer --set-volume $(echo {} | awk '{print int($1)}')")
      (slider_widget_sm :value brightness :class "brightness" :cmd "brightnessctl s {}%")
      (slider_widget_sm :value {EWW_BATTERY["BAT1"].capacity} :class "battery"))))

(defwidget dashboard []
	(box
		:orientation "horizontal"
		:halign "center"
		(slider_widget_v :value volume :classs "volume" :icon "")
		(slider_widget_v :value brightness :class "brightness" :icon "" )))


(defwidget slider_widget_v [value ?cmd ?class ?icon]
    (box
    :class {"slider_lg_v" + " " + class}
    :orientation "vertical"
    :halign "center"
    (progress
      :orientation "v"
      :flipped true
      :value value)
    {icon}
    {value + "%"}))

(defwidget slider_widget_sm [value ?cmd ?class]
  (box
    :class {"slider_sm" + " " + class}
    :orientation "horizontal"
    :valign "center"
    ; :halign "start"
    (scale 
      :min 0
      :max 101
      :onchange cmd
      :value value)
    {value + "%"}))
